{"name":"Pozeray","tagline":"A tool for logging front-end JavaScript.","body":"Pozeray\r\n=======\r\nPozeray is a tool for logging front-end JavaScript.\r\n\r\n# Cons of the standard console object\r\nIt is easy to use console to output logging informations like errors, warnings, infos, etc. However\r\n* each browser has different implementation for the console object. Some browsers have more methods, others have less.\r\n* the UI of the console is different in each browser\r\n* there are too many redundant messages in the browsers native console panel\r\n* it is impossible to group somehow the logged messages with the standard console\r\n\r\n# Pros of using Pozeray loggers\r\n* Pozeray loggers are the same in all browsers.\r\n* Each logged message has an area attached to it. This allows to group messages nicely and filter them easily.\r\n\r\n# How to use it\r\nCurrently Pozeray has these methods to log messages: `error, warn, info, log, debug`. All of them have one input parameter - the message.\r\n\r\nThere is a preinitialized logger for logging messages in the \"Default\" area. This logger is accessible through the $logger global variable. E.g., logging an error in the default area\r\n```\r\n$logger.error('Oops, something went very wrong!');\r\n```\r\n\r\nIn order to use a new area, a new Logger has to be created. E.g., creating a Logger in the \"Tracking\" area and logging a warning\r\n```\r\nvar trackingLogger = new Logger({ area: 'Tracking'});\r\ntrackingLogger.warn('This a tracking warning.');\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}